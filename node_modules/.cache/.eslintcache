[{"/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/index.js":"1","/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/App.js":"2","/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js":"3","/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/constants.js":"4","/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/Components/Arena/index.js":"5","/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/Components/LoadingIndicator/index.js":"6"},{"size":219,"mtime":1651643761481,"results":"7","hashOfConfig":"8"},{"size":4772,"mtime":1651769859698,"results":"9","hashOfConfig":"8"},{"size":4313,"mtime":1651773636942,"results":"10","hashOfConfig":"8"},{"size":418,"mtime":1651800330654,"results":"11","hashOfConfig":"8"},{"size":6401,"mtime":1651773730271,"results":"12","hashOfConfig":"8"},{"size":261,"mtime":1651643761461,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"tt4zzh",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/index.js",[],["29","30"],"/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/App.js",[],"/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js",["31"],"import React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport {CONTRACT_ADDRESS, transformCharacterData} from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const[characters, setCharacters] =useState([]);\n  const[gameContract, setGameContract] = useState(null);\n  const[mintingCharacter, setMintingCharacter] = useState(false);\n  \n  //NFTキャラをミント\n  const mintCharacterNFTAction = (characterId) => async () =>{\n    try{\n      if(gameContract){\n        setMintingCharacter(true);\n\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn:\", mintTxn);\n        setMintingCharacter(false);\n      }\n    }catch(error){\n      console.warn(\"MintCharacterAction Error:\", error);\n      setMintingCharacter(false);\n    }\n  }\n  useEffect(() => {\n    const { ethereum } = window;\n    if(ethereum){\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS,myEpicGame.abi,signer);\n\n      setGameContract(gameContract);\n    }else{\n      console.log(\"Ethereum object not found\");\n    }     \n  },[]);\n\n  useEffect(() =>{\n    //キャラデータ取得\n    const getCharacters = async () => {\n      try{\n        console.log(\"Getting contract characters to mint\");\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n\n        console.log(\"charactersTxn:\", charactersTxn);\n        //全てのNFTキャラクターのデータを変換\n        const characters = charactersTxn.map((CharacterData) => transformCharacterData(CharacterData));\n        //ミント可能なすべてのNFTキャラクターの状態を設定\n        setCharacters(characters);\n      }catch(error){\n        console.error(\"Something went wrong fetching characters: \", error);\n      }\n    };\n\n    // イベントを受信したときに起動するコールバックメソッドを追加\n    const onCharacterMint = async(sender, tokenId, characterIndex) =>{\n      console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`);\n      //mint後メタデータを受け取りアリーナに移動するための状態にする\n      if(gameContract){\n        const characterNFT = await gameContract.checkIFUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n        alert(\n          `NFTキャラクターがmintされました --URL:https://rinkeby.rarible.com/token/${gameContract.address}:${tokenId.toNumber()}?tab=details`\n        )\n      }\n    };\n\n    if(gameContract){\n      getCharacters();\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () =>{\n      //gameContractの準備が出来たらNFTキャラを読み込む\n      if(gameContract){\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  },[gameContract]);\n\n  //NFTcharaをフロントエンドにレンダリング\n  const renderCharacters  = () =>\n   characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={`https://cloudflare-ipfs.com/ipfs/${character.imageURI}`} alt={character.name}/>\n        <button type=\"button\" className=\"character-mint-button\" onClick={mintCharacterNFTAction(index)}>{`Mint ${character.name}`}</button>\n      </div>\n   ));\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\n      {characters.length > 0 && ( \n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator/>\n            <p>Minting In Progress...</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default SelectCharacter;","/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/constants.js",[],"/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/Components/Arena/index.js",["32"],"import React, {useEffect, useState} from \"react\";\nimport {ethers} from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport \"./Arena.css\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\n//characterNFTのメタデータを渡します\nconst Arena = ({characterNFT, setCharacterNFT}) =>{\n    //コントラクトのデータを保有する状態変数を初期化する\n    const [gameContract, setGameContract] = useState(null);\n    //ボスのメタデータを保存する状態変数\n    const[boss, setBoss] = useState(null);\n    //コントラクトのデータを保有する状態変数を初期化\n    const[attackState, setAttackState] = useState(\"\");\n    const[showToast, setShowToast] = useState(false);\n    \n    //ページがロードすると実行\n    useEffect(() =>{\n        //コントラクトからボスのメタデータを取得、bossを設定する非同期関数fetchBossを設定\n        const fetchBoss = async () =>{\n            const bossTxn = await gameContract.getBigBoss();\n            console.log(\"Boss: \", bossTxn);\n            setBoss(transformCharacterData(bossTxn));\n        };\n        \n        //AttackCompleteイベントを受信したときに起動するコールバックメソッド\n        const onAttackComplete = (newBossHp, newPlayerHp) =>{\n            //bossのHP\n            const bossHp = newBossHp.toNumber();\n            //NFTキャラの新しHP\n            const playerHp = newPlayerHp.toNumber();\n            console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n            //キャラとボスのHP更新\n            setBoss((prevState) =>{\n                return{ ...prevState, hp:bossHp};\n            });\n            setCharacterNFT((prevState) =>{\n                return{ ...prevState, hp:playerHp};\n            });\n        };\n        \n        if(gameContract){\n            //コントラクトの準備が出来たらボスのメタデータを取得\n            fetchBoss();\n            gameContract.on(\"AttackComplete\", onAttackComplete);\n        }\n        //コンポーネントがマウントされたらリスナーを停止\n        return () =>{\n            if(gameContract){\n                gameContract.off(\"AttackComplete\", onAttackComplete);\n            }\n        };\n    },[gameContract]);\n\n    //NFTcharaがボスを攻撃する際に使用する関数\n    const runAttackAction = async () => {\n        try{\n            if(gameContract){\n                setAttackState(\"attacking\");\n                console.log(\"Attacking boss...\");\n                //NFTキャラがボスを攻撃\n                const attackTxn = await gameContract.attackBoss();\n                //tranzactionの承認を待つ\n                await attackTxn.wait();\n                console.log(\"attackTxn:\", attackTxn);\n                //attackStateの状態をhitに設定\n                setAttackState(\"hit\");\n            }\n\n            setShowToast(true);\n            setTimeout(() =>{\n                setShowToast(false);\n            }, 5000);\n        }catch(error){\n            console.error(\"Error attacking boss:\", error);\n            setAttackState(\"\");\n        }\n    };\n\n    //ページがロードするとuseEffect\n    useEffect(() => {\n        const {ethereum} =window;\n        if(ethereum){\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const gameContract = new ethers.Contract(\n                CONTRACT_ADDRESS,myEpicGame.abi,signer\n            );\n            setGameContract(gameContract);\n        }else{\n            console.log(\"Ethereum object not found\");\n        }\n    },[]);\n\n    return(\n        <div className=\"arena-container\">\n            {boss && characterNFT && (\n                <div id=\"toast\" className={showToast ? \"show\" : \"\"}>\n                    <div id=\"desc\">{`${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n                </div>\n            )}\n            {boss && (\n                <div className=\"boss-container\">\n                    <div className={`boss-content ${attackState}`}>\n                        <h2>{boss.name}</h2>\n                        <div className=\"image-content\">\n                            <img src={boss.imageURI} alt={`Boss ${boss.name}`}/>\n                            <div className=\"health-bar\">\n                                <progress value={boss.hp} max={boss.maxHp}/>\n                                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"attack-container\">\n                        <button className=\"cta-button\" onClick={runAttackAction}>\n                            {`Attack${boss.name}`}\n                        </button>\n                    </div>\n                    {attackState === \"attacking\" && (\n                        <div className=\"loading-indicator\">\n                            <LoadingIndicator />\n                            <p>Attacking</p>\n                        </div>\n                    )}\n                </div>\n            )}\n            {characterNFT && (\n                <div className=\"players-container\">\n                    <div className=\"player-container\">\n                        <h2>Your Character</h2>\n                        <div className=\"player\">\n                            <div className=\"image-content\">\n                                <h2>{characterNFT.name}</h2>\n                                <img src={`https://cloudflare-ipfs.com/ipfs/${characterNFT.imageURI}`} alt={`Character${characterNFT.name}`}/>\n                                <div className=\"health-bar\">\n                                    <progress value={characterNFT.hp} max={characterNFT.maxHp}/>\n                                    <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>                                    \n                                </div>\n                            </div>\n                            <div className=\"stats\">\n                                <h4>{`Attack Damage: ${characterNFT.attackDamage}`}</h4>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Arena;","/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/Components/LoadingIndicator/index.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":85,"column":5,"nodeType":"39","endLine":85,"endColumn":19,"suggestions":"40"},{"ruleId":"37","severity":1,"message":"38","line":54,"column":7,"nodeType":"39","endLine":54,"endColumn":21,"suggestions":"41"},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCharacterNFT'. Either include it or remove the dependency array. If 'setCharacterNFT' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["44"],["45"],"no-global-assign","no-unsafe-negation",{"desc":"46","fix":"47"},{"desc":"46","fix":"48"},"Update the dependencies array to be: [gameContract, setCharacterNFT]",{"range":"49","text":"50"},{"range":"51","text":"50"},[2967,2981],"[gameContract, setCharacterNFT]",[1944,1958]]
{"ast":null,"code":"var _jsxFileName = \"/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null); //NFTキャラをミント\n\n  const mintCharacterNFTAction = characterId => async () => {\n    try {\n      if (gameContract) {\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn:\", mintTxn);\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error);\n    }\n  };\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n  useEffect(() => {\n    //キャラデータ取得\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\");\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn:\", charactersTxn); //全てのNFTキャラクターのデータを変換\n\n        const characters = charactersTxn.map(CharacterData => transformCharacterData(CharacterData)); //ミント可能なすべてのNFTキャラクターの状態を設定\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters: \", error);\n      }\n    }; // イベントを受信したときに起動するコールバックメソッドを追加\n\n\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`); //mint後メタデータを受け取りアリーナに移動するための状態にする\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUseHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () => {\n      //gameContractの準備が出来たらNFTキャラを読み込む\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]); //NFTcharaをフロントエンドにレンダリング\n\n  const renderCharacters = () => characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: character.imageURI,\n      alt: character.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"character-mint-button\",\n      onClick: mintCharacterNFTAction(index),\n      children: `Mint ${character.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, character.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 7\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u23EC \\u4E00\\u7DD2\\u306B\\u6226\\u3046 NFT \\u30AD\\u30E3\\u30E9\\u30AF\\u30BF\\u30FC\\u3092\\u9078\\u629E \\u23EC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-grid\",\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectCharacter, \"ReBpEb1ZDzzSsIn8oOlkhmevdME=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"names":["React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","mintCharacterNFTAction","characterId","console","log","mintTxn","mintCharacterNFT","wait","error","warn","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","getCharacters","charactersTxn","getAllDefaultCharacters","map","CharacterData","onCharacterMint","sender","tokenId","characterIndex","toNumber","characterNFT","checkIfUseHasNFT","on","off","renderCharacters","character","index","name","imageURI","length"],"sources":["/mnt/c/project/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport {CONTRACT_ADDRESS, transformCharacterData} from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const[characters, setCharacters] =useState([]);\n  const[gameContract, setGameContract] = useState(null);\n  \n  //NFTキャラをミント\n  const mintCharacterNFTAction = (characterId) => async () =>{\n    try{\n      if(gameContract){\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn:\", mintTxn);\n      }\n    }catch(error){\n      console.warn(\"MintCharacterAction Error:\", error);\n    }\n  }\n  useEffect(() => {\n    const { ethereum } = window;\n    if(ethereum){\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS,myEpicGame.abi,signer);\n\n      setGameContract(gameContract);\n    }else{\n      console.log(\"Ethereum object not found\");\n    }     \n  },[]);\n\n  useEffect(() =>{\n    //キャラデータ取得\n    const getCharacters = async () => {\n      try{\n        console.log(\"Getting contract characters to mint\");\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n\n        console.log(\"charactersTxn:\", charactersTxn);\n        //全てのNFTキャラクターのデータを変換\n        const characters = charactersTxn.map((CharacterData) => transformCharacterData(CharacterData));\n        //ミント可能なすべてのNFTキャラクターの状態を設定\n        setCharacters(characters);\n      }catch(error){\n        console.error(\"Something went wrong fetching characters: \", error);\n      }\n    };\n\n    // イベントを受信したときに起動するコールバックメソッドを追加\n    const onCharacterMint = async(sender, tokenId, characterIndex) =>{\n      console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`);\n      //mint後メタデータを受け取りアリーナに移動するための状態にする\n      if(gameContract){\n        const characterNFT = await gameContract.checkIfUseHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if(gameContract){\n      getCharacters();\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () =>{\n      //gameContractの準備が出来たらNFTキャラを読み込む\n      if(gameContract){\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  },[gameContract]);\n\n  //NFTcharaをフロントエンドにレンダリング\n  const renderCharacters  = () =>\n   characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name}/>\n        <button type=\"button\" className=\"character-mint-button\" onClick={mintCharacterNFTAction(index)}>{`Mint ${character.name}`}</button>\n      </div>\n   ));\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\n      {characters.length > 0 && ( \n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n    </div>\n  );\n};\nexport default SelectCharacter;"],"mappings":"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"},"metadata":{},"sourceType":"module"}